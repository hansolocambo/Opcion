/*
  Opcion Font Viewer
  Copyright (C) 2004 Paul Chiu. All Rights Reserved.

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
*/

/*
 * MainWindow.java
 *
 * Created on 28 January 2004, 12:03
 */
package FontViewer.windows;
import FontViewer.components.*;
import FontViewer.windows.dialogs.*;

import java.awt.*;
import java.io.*;
import java.util.*;
import javax.swing.*;
import java.lang.ref.*;

import com.jgoodies.plaf.*;
import com.jgoodies.plaf.plastic.*;
import com.jgoodies.plaf.plastic.theme.*;

public class MainWindow extends javax.swing.JFrame {
    private File currentDirectory;
    private File[] directoryFiles;
    private Font[] systemFonts;
    private String[] systemFontsNames;
    private int fontSize;
    private int[] fontSizes = {6, 8, 9, 10, 11, 12, 14, 16, 18, 20, 24, 28, 32, 36, 42, 48, 56, 72, 84};
    private Vector fSizes;
    private ListView listView;
    private AboutDialog aboutDialog;
    private Image icon;
    
    /** Creates new form mainWindow */
    public MainWindow() {
        // Set Look and Feel
        try {
            PlasticXPLookAndFeel laf = new PlasticXPLookAndFeel();
            laf.setMyCurrentTheme(new SkyBlue());
            UIManager.setLookAndFeel(laf);
        } catch (Exception e) {
        }

        // Load Icon
        ClassLoader cl = this.getClass().getClassLoader();
        icon = new ImageIcon(cl.getResource("FontViewer/resources/icons/IconSmall.png")).getImage();

        initFontSizes();
        initComponents();
        
        // Add speical JGoodies properties
        tabbedPane.putClientProperty(Options.NO_CONTENT_BORDER_KEY, Boolean.TRUE);
        menuBar.putClientProperty(Options.HEADER_STYLE_KEY, HeaderStyle.BOTH);
        menuBar.putClientProperty(PlasticLookAndFeel.BORDER_STYLE_KEY, BorderStyle.SEPARATOR);
        menuBar.requestFocus();
        
        // Center window
        this.setLocation((Toolkit.getDefaultToolkit().getScreenSize().width - this.getSize().width)/2,
                         (Toolkit.getDefaultToolkit().getScreenSize().height - this.getSize().height)/2);

        // Set font size
        fontSize = 20;
        fontSizeComboBox.setSelectedItem(new Integer(fontSize));

        // Initialize system fonts
        initSystemFonts();
    }
    
    private void initSystemFonts() {
        // Initialize system fonts
        systemFonts = GraphicsEnvironment.getLocalGraphicsEnvironment().getAllFonts();
        systemFontsNames = new String[systemFonts.length];
        for (int i=0; i<systemFonts.length; i++) {
            systemFontsNames[i] = systemFonts[i].getName();
        }
        systemFontsList.setListData(systemFontsNames);
    }
    
    private void initFontSizes() {
        fSizes = new Vector(fontSizes.length);
        for (int i=0; i<fontSizes.length; i++) {
            fSizes.add(new Integer(fontSizes[i]));
        }
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        splitPane = new javax.swing.JSplitPane();
        tabbedPane = new javax.swing.JTabbedPane();
        systemFontsScrollPane = new javax.swing.JScrollPane();
        systemFontsList = new javax.swing.JList();
        otherFontsPanel = new javax.swing.JPanel();
        locationPanel = new javax.swing.JPanel();
        locationLabel = new javax.swing.JLabel();
        locationTextField = new javax.swing.JTextField();
        browseButton = new javax.swing.JButton();
        fileListScrollPane = new javax.swing.JScrollPane();
        fileList = new javax.swing.JList();
        previewPanel = new javax.swing.JPanel();
        previewTextAreaScollPane = new javax.swing.JScrollPane();
        previewTextArea = new FontViewer.components.AATextArea();
        fontInfoPanel = new javax.swing.JPanel();
        fontNameLabel = new javax.swing.JLabel();
        fontName = new javax.swing.JLabel();
        fontSizePanel = new javax.swing.JPanel();
        fontSizeLabel = new javax.swing.JLabel();
        fontSizeComboBox = new JComboBox(fSizes);
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        quitMenuItem = new javax.swing.JMenuItem();
        viewsMenu = new javax.swing.JMenu();
        listViewMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        installFontsMenuItem = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JSeparator();
        aboutMenuItem = new javax.swing.JMenuItem();

        getContentPane().setLayout(new java.awt.BorderLayout(0, 5));

        setTitle("Opcion Font Viewer");
        setFont(new java.awt.Font("Dialog", 0, 10));
        setIconImage(icon);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });

        splitPane.setBorder(null);
        splitPane.setDividerSize(5);
        splitPane.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        splitPane.setResizeWeight(0.5);
        tabbedPane.setPreferredSize(new java.awt.Dimension(400, 150));
        systemFontsScrollPane.setBorder(null);
        systemFontsList.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                systemFontsListKeyReleased(evt);
            }
        });
        systemFontsList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                systemFontsListMouseClicked(evt);
            }
        });

        systemFontsScrollPane.setViewportView(systemFontsList);

        tabbedPane.addTab("System Fonts", systemFontsScrollPane);

        otherFontsPanel.setLayout(new java.awt.BorderLayout(0, 2));

        locationPanel.setLayout(new java.awt.BorderLayout(4, 0));

        locationLabel.setText("Location:");
        locationPanel.add(locationLabel, java.awt.BorderLayout.WEST);

        locationTextField.setToolTipText("Enter the location where fonts you wish to view are stored here");
        locationTextField.setPreferredSize(new java.awt.Dimension(100, 20));
        locationTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                locationTextFieldKeyPressed(evt);
            }
        });

        locationPanel.add(locationTextField, java.awt.BorderLayout.CENTER);

        browseButton.setText("Browse");
        browseButton.setToolTipText("Browse for font directory");
        browseButton.setPreferredSize(new java.awt.Dimension(81, 20));
        browseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseButtonActionPerformed(evt);
            }
        });

        locationPanel.add(browseButton, java.awt.BorderLayout.EAST);

        otherFontsPanel.add(locationPanel, java.awt.BorderLayout.NORTH);

        fileListScrollPane.setBorder(null);
        fileList.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                fileListKeyReleased(evt);
            }
        });
        fileList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fileListMouseClicked(evt);
            }
        });

        fileListScrollPane.setViewportView(fileList);

        otherFontsPanel.add(fileListScrollPane, java.awt.BorderLayout.CENTER);

        tabbedPane.addTab("Other Fonts", otherFontsPanel);

        splitPane.setLeftComponent(tabbedPane);

        previewPanel.setLayout(new java.awt.BorderLayout(0, 3));

        previewPanel.setBorder(new javax.swing.border.TitledBorder(" Sample Text "));
        previewPanel.setPreferredSize(new java.awt.Dimension(13, 175));
        previewTextAreaScollPane.setBorder(null);
        previewTextArea.setLineWrap(true);
        previewTextArea.setText("Click here to change text.");
        previewTextArea.setWrapStyleWord(true);
        previewTextArea.setPreferredSize(new java.awt.Dimension(0, 100));
        previewTextArea.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                previewTextAreaMouseClicked(evt);
            }
        });

        previewTextAreaScollPane.setViewportView(previewTextArea);

        previewPanel.add(previewTextAreaScollPane, java.awt.BorderLayout.CENTER);

        fontInfoPanel.setLayout(new java.awt.BorderLayout(2, 0));

        fontInfoPanel.setPreferredSize(new java.awt.Dimension(10, 20));
        fontNameLabel.setFont(new java.awt.Font("Dialog", 0, 12));
        fontNameLabel.setText("Font Name: ");
        fontInfoPanel.add(fontNameLabel, java.awt.BorderLayout.WEST);

        fontName.setFont(new java.awt.Font("Dialog", 0, 12));
        fontName.setText("No font selected");
        fontInfoPanel.add(fontName, java.awt.BorderLayout.CENTER);

        fontSizePanel.setLayout(new java.awt.GridLayout(1, 2));

        fontSizeLabel.setFont(new java.awt.Font("Dialog", 0, 12));
        fontSizeLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        fontSizeLabel.setText("Font Size: ");
        fontSizePanel.add(fontSizeLabel);

        fontSizeComboBox.setFont(new java.awt.Font("Dialog", 0, 12));
        fontSizeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fontSizeComboBoxActionPerformed(evt);
            }
        });

        fontSizePanel.add(fontSizeComboBox);

        fontInfoPanel.add(fontSizePanel, java.awt.BorderLayout.EAST);

        previewPanel.add(fontInfoPanel, java.awt.BorderLayout.NORTH);

        splitPane.setRightComponent(previewPanel);

        getContentPane().add(splitPane, java.awt.BorderLayout.CENTER);

        fileMenu.setMnemonic('f');
        fileMenu.setText("File");
        quitMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_MASK));
        quitMenuItem.setMnemonic('q');
        quitMenuItem.setText("Quit");
        quitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitMenuItemActionPerformed(evt);
            }
        });

        fileMenu.add(quitMenuItem);

        menuBar.add(fileMenu);

        viewsMenu.setMnemonic('v');
        viewsMenu.setText("Views");
        listViewMenuItem.setMnemonic('l');
        listViewMenuItem.setText("List View");
        listViewMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listViewMenuItemActionPerformed(evt);
            }
        });

        viewsMenu.add(listViewMenuItem);

        menuBar.add(viewsMenu);

        helpMenu.setMnemonic('h');
        helpMenu.setText("Help");
        installFontsMenuItem.setMnemonic('i');
        installFontsMenuItem.setText("Installing Fonts");
        installFontsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                installFontsMenuItemActionPerformed(evt);
            }
        });

        helpMenu.add(installFontsMenuItem);

        helpMenu.add(jSeparator2);

        aboutMenuItem.setMnemonic('a');
        aboutMenuItem.setText("About");
        aboutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutMenuItemActionPerformed(evt);
            }
        });

        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        pack();
    }//GEN-END:initComponents

    private void installFontsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_installFontsMenuItemActionPerformed
        TextAreaFromFileDialog taffd = new TextAreaFromFileDialog(this, "Help - Installing Fonts", "installHelp.txt");
        taffd.setWrap(false);
        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        taffd.setBounds((screenSize.width-480)/2, (screenSize.height-295)/2, 480, 295);
        taffd.show();
    }//GEN-LAST:event_installFontsMenuItemActionPerformed

    private void aboutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutMenuItemActionPerformed
        aboutDialog = new AboutDialog(this);
        aboutDialog.show();
    }//GEN-LAST:event_aboutMenuItemActionPerformed

    private void quitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_quitMenuItemActionPerformed

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        if ((listView != null)&&listView.isDisplayable()) {
            listView.show();
        }
        if ((aboutDialog != null)&&aboutDialog.isDisplayable()) {
            aboutDialog.show();
        }        
    }//GEN-LAST:event_formWindowActivated

    private void listViewMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listViewMenuItemActionPerformed
        if (tabbedPane.getTitleAt(tabbedPane.getSelectedIndex()).equals("System Fonts")) {
            listView = new ListView(this, 10, 1, systemFonts);
            listView.show();
        } else if (tabbedPane.getTitleAt(tabbedPane.getSelectedIndex()).equals("Other Fonts")) {
            if (directoryFiles != null) {
                listView = new ListView(this, 10, 1, directoryFiles);
                listView.show();
            } else {
                new JOptionPane().showMessageDialog(this, "There are no files to view.", "Error!", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_listViewMenuItemActionPerformed

    private void fileListKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fileListKeyReleased
        updatePreviewTextArea();
    }//GEN-LAST:event_fileListKeyReleased

    private void fontSizeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fontSizeComboBoxActionPerformed
        fontSize = fontSizes[fontSizeComboBox.getSelectedIndex()];
        previewTextArea.setFont(previewTextArea.getFont().deriveFont(Font.PLAIN, (float)fontSize));
    }//GEN-LAST:event_fontSizeComboBoxActionPerformed

    private void locationTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_locationTextFieldKeyPressed
        // Add your handling code here:
        if (evt.getKeyCode() == evt.VK_ENTER) {
            File f = new File(locationTextField.getText());
            if (f.exists()) {
                if (f.isDirectory()) {
                    currentDirectory = f;
                    refreshFileList();
                } else {
                    new JOptionPane().showMessageDialog(this, "The location does not point to a directory.", "Error!", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                new JOptionPane().showMessageDialog(this, "Directory does not exist.", "Error!", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_locationTextFieldKeyPressed

    private void browseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseButtonActionPerformed
        // Create new file chooser
        JFileChooser fc = new JFileChooser(new File(""));
        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        // Show open dialog; this method does not return until the dialog is closed
        fc.showOpenDialog(this);
        if (fc.getSelectedFile() != null) {
            currentDirectory = fc.getSelectedFile();
            locationTextField.setText(currentDirectory.toString());
            // Refresh file list
            refreshFileList();
        }
    }//GEN-LAST:event_browseButtonActionPerformed

    private void previewTextAreaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_previewTextAreaMouseClicked
        previewTextArea.selectAll();
    }//GEN-LAST:event_previewTextAreaMouseClicked

    private void fileListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fileListMouseClicked
        updatePreviewTextArea();
    }//GEN-LAST:event_fileListMouseClicked

    private void systemFontsListKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_systemFontsListKeyReleased
        updatePreviewTextArea();
    }//GEN-LAST:event_systemFontsListKeyReleased

    private void systemFontsListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_systemFontsListMouseClicked
        updatePreviewTextArea();
    }//GEN-LAST:event_systemFontsListMouseClicked
    
    /** Exit the Application */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        System.exit(0);
    }//GEN-LAST:event_exitForm
    
    private void refreshFileList() {
        directoryFiles = currentDirectory.listFiles(new FontViewer.filters.FontFileFilter());
        
        if (directoryFiles.length == 0) {
            String[] message = {"This folder does not contain any fonts."};
            fileList.setListData(message);
            fileList.setEnabled(false);
        } else {
            fileList.setListData(currentDirectory.list(new FontViewer.filters.FontFileFilter()));
            fileList.setEnabled(true);
        }
    }

    private void updatePreviewTextArea() {
        if (tabbedPane.getTitleAt(tabbedPane.getSelectedIndex()).equals("System Fonts")) {
            if (systemFontsList.getSelectedValue() != null) {
                Font chosenFont = new Font(systemFonts[systemFontsList.getSelectedIndex()].getName(), Font.PLAIN, fontSize);
                WeakReference wrf = new WeakReference(chosenFont);
                previewTextArea.setFont((Font)wrf.get());
                fontName.setText(((Font)wrf.get()).getName());
//                previewTextArea.setFont(chosenFont);
//                fontName.setText(chosenFont.getName());
            }
        } else if (tabbedPane.getTitleAt(tabbedPane.getSelectedIndex()).equals("Other Fonts")) {
            if (fileList.getSelectedValue() != null) {
                try {
                    Font chosenFont = Font.createFont(Font.TRUETYPE_FONT, new FileInputStream(directoryFiles[fileList.getSelectedIndex()]));
                    WeakReference wrf = new WeakReference(chosenFont);
                    previewTextArea.setFont(((Font)wrf.get()).deriveFont(Font.PLAIN, fontSize));
                    fontName.setText(((Font)wrf.get()).getName());
                } catch (Exception e) {
                    new JOptionPane().showMessageDialog(this, "Error loading font.", "Error!", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }
    

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JButton browseButton;
    private javax.swing.JList fileList;
    private javax.swing.JScrollPane fileListScrollPane;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JPanel fontInfoPanel;
    private javax.swing.JLabel fontName;
    private javax.swing.JLabel fontNameLabel;
    private javax.swing.JComboBox fontSizeComboBox;
    private javax.swing.JLabel fontSizeLabel;
    private javax.swing.JPanel fontSizePanel;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JMenuItem installFontsMenuItem;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JMenuItem listViewMenuItem;
    private javax.swing.JLabel locationLabel;
    private javax.swing.JPanel locationPanel;
    private javax.swing.JTextField locationTextField;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JPanel otherFontsPanel;
    private javax.swing.JPanel previewPanel;
    private javax.swing.JTextArea previewTextArea;
    private javax.swing.JScrollPane previewTextAreaScollPane;
    private javax.swing.JMenuItem quitMenuItem;
    private javax.swing.JSplitPane splitPane;
    private javax.swing.JList systemFontsList;
    private javax.swing.JScrollPane systemFontsScrollPane;
    private javax.swing.JTabbedPane tabbedPane;
    private javax.swing.JMenu viewsMenu;
    // End of variables declaration//GEN-END:variables
}